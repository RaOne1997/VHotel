// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VHotel.DataAccess;

#nullable disable

namespace VHotel.Migrations
{
    [DbContext(typeof(VhotelsSQLContex))]
    [Migration("20220627134623_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CountryMaster", "Location");
                });

            modelBuilder.Entity("State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryrefID")
                        .HasColumnType("int");

                    b.Property<string>("StateID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryrefID");

                    b.ToTable("StateMaster", "Location");
                });

            modelBuilder.Entity("Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomType")
                        .IsUnique();

                    b.ToTable("RoomTypes", "RoomDetails");
                });

            modelBuilder.Entity("VHotel.DataAccess.Model.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryRefID")
                        .HasColumnType("int");

                    b.Property<int>("GaustNo")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Landmark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.Property<int>("RoomtypeRef")
                        .HasColumnType("int");

                    b.Property<int>("StaterefID")
                        .HasColumnType("int");

                    b.Property<DateTime>("checkin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("checkout")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryRefID");

                    b.HasIndex("RoomtypeRef");

                    b.HasIndex("StaterefID");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("VHotel.DataAccess.Model.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RoomImage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoomLevel")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("RoomPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RoomTypeRefID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomNumber")
                        .IsUnique();

                    b.HasIndex("RoomTypeRefID");

                    b.ToTable("RoomDetails", "RoomDetails");
                });

            modelBuilder.Entity("State", b =>
                {
                    b.HasOne("Country", "Countryref")
                        .WithMany()
                        .HasForeignKey("CountryrefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Countryref");
                });

            modelBuilder.Entity("VHotel.DataAccess.Model.Hotel", b =>
                {
                    b.HasOne("Country", "country")
                        .WithMany()
                        .HasForeignKey("CountryRefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Type", "type")
                        .WithMany()
                        .HasForeignKey("RoomtypeRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("State", "state")
                        .WithMany()
                        .HasForeignKey("StaterefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("country");

                    b.Navigation("state");

                    b.Navigation("type");
                });

            modelBuilder.Entity("VHotel.DataAccess.Model.Room", b =>
                {
                    b.HasOne("Type", "type")
                        .WithMany()
                        .HasForeignKey("RoomTypeRefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("type");
                });
#pragma warning restore 612, 618
        }
    }
}
